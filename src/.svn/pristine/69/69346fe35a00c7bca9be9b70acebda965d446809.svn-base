package packet.netty;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.ByteToMessageDecoder;
import java.util.List;
import org.apache.log4j.LogManager;
import packet.crypto.AESCipher;
import packet.crypto.CIGCipher;
import packet.transfer.read.InPacket;
import tools.HexTool;

public class PacketDecoder extends ByteToMessageDecoder {

    private static final org.apache.log4j.Logger log = LogManager.getRootLogger();

    @Override
    protected void decode(ChannelHandlerContext chc, ByteBuf in, List<Object> out) {
        NettyClient c = chc.channel().attr(NettyClient.CLIENT_KEY).get();
        boolean bEncryptData = true;
        if (c != null) {
            int uSeqRcv = c.getRecvIV();
            if (c.getStoredLength() == -1) {
                if (in.readableBytes() < 4) {
                    return;
                }
                int uRawSeq = in.readShortLE();
                int uDataLen = in.readShortLE();
                if (bEncryptData) {
                    uDataLen ^= uRawSeq;
                }
                if (uDataLen > 0x50000) {
                    log.error("Recv packet length overflow.");
                    return;
                }
                short uSeqBase = (short) ((uSeqRcv >> 16) ^ uRawSeq);
                if (uSeqBase != AESCipher.nVersion) {
                    log.error("uSeqRcv " + uSeqRcv + " uSeqRcvToHex: " + HexTool.readableByteArray(HexTool.intToByte(uSeqRcv)) + " uRawSeq: " + uRawSeq + " uDataLen: " + uDataLen);
                    log.error(String.format("[PacketDecoder] | Incorrect packet seq! Dropping client %s.", c.getIP()));
                    c.setRecvIV(CIGCipher.InnoHash(uSeqRcv, 4, 0));
                    //c.close();
                    return;
                }
                c.setStoredLength(uDataLen);
            }
            if (in.readableBytes() >= c.getStoredLength()) {
                byte[] dec = new byte[c.getStoredLength()];
                in.readBytes(dec);

                if (bEncryptData) {
                    //AESCipher.Crypt(dec, uSeqRcv);
                }

                c.setRecvIV(CIGCipher.InnoHash(uSeqRcv, 4, 0));
                c.setStoredLength(-1);
                InPacket inPacket = new InPacket(dec);
                out.add(inPacket);
            }
        }
    }
}
