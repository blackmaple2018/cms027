package client.player.commands.object;

import client.Client;
import java.util.ArrayList;
import constants.CommandConstants.CommandType;
import static constants.CommandConstants.CommandType.TRADE;
import constants.CommandConstants.CoomandRank;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Collections;
import java.util.HashMap;
import client.player.Player;
import client.player.commands.GMCommand;
import client.player.commands.PlayerCommand;
import static gui.logo.group.群;
import java.sql.Connection;
import launch.Start;
import tools.FileLogger;

public class CommandProcessor {

    private final static HashMap<String, CommandObject> commands = new HashMap<>();
    private final static HashMap<Integer, ArrayList<String>> commandList = new HashMap<>();

    static {

        Class<?>[] CommandFiles = {
            PlayerCommand.class, GMCommand.class
        };

        for (Class<?> clasz : CommandFiles) {
            try {
                CoomandRank rankNeeded = (CoomandRank) clasz.getMethod("getPlayerLevelRequired", new Class<?>[]{}).invoke(null, (Object[]) null);
                Class<?>[] a = clasz.getDeclaredClasses();
                ArrayList<String> cL = new ArrayList<>();
                for (Class<?> c : a) {
                    try {
                        if (!Modifier.isAbstract(c.getModifiers()) && !c.isSynthetic()) {
                            Object o = c.newInstance();
                            boolean enabled;
                            try {
                                enabled = c.getDeclaredField("enabled").getBoolean(c.getDeclaredField("enabled"));
                            } catch (NoSuchFieldException ex) {
                                enabled = true;
                            }
                            if (o instanceof CommandExecute && enabled) {
                                cL.add(rankNeeded.getCommandPrefix() + c.getSimpleName().toLowerCase());
                                commands.put(rankNeeded.getCommandPrefix() + c.getSimpleName().toLowerCase(), new CommandObject(rankNeeded.getCommandPrefix() + c.getSimpleName().toLowerCase(), (CommandExecute) o, rankNeeded.getLevel()));;
                            }
                        }
                    } catch (IllegalAccessException | IllegalArgumentException | InstantiationException | SecurityException ex) {
                        FileLogger.printError(FileLogger.COMMANDS_EXCEPTION, ex);
                    }
                }
                Collections.sort(cL);
                commandList.put(rankNeeded.getLevel(), cL);
            } catch (IllegalAccessException | IllegalArgumentException | NoSuchMethodException | SecurityException | InvocationTargetException ex) {
                FileLogger.printError(FileLogger.COMMANDS_EXCEPTION, ex);
            }
        }
    }

    private static void showMessage(Client c, String msg, CommandType type) {
        switch (type) {
            case NORMAL:
                c.getPlayer().dropMessage(6, msg);
                break;
            case TRADE:
                c.getPlayer().dropMessage(-2, "Error : " + msg);
                break;
        }
    }

    public static boolean processCommand(Client c, String line, CommandType type) {
        Player p = c.getPlayer();
        if (p != null) {
            if (line.charAt(0) == CoomandRank.NORMAL.getCommandPrefix()) {
                String[] splitted = line.split(" ");
                splitted[0] = splitted[0].toLowerCase();

                CommandObject commandOb = commands.get(splitted[0]);
                if (commandOb == null || commandOb.getType() != type) {
                    showMessage(c, "输入的指令不存在。", type);
                    return true;
                }
                try {
                    return commandOb.execute(c, splitted);
                } catch (Exception e) {
                    showMessage(c, "有个错误。", type);
                    if (p.isGameMaster()) {
                        showMessage(c, "Error: " + e, type);
                    }
                }
                return true;
            }
            if (p.getAdministrativeLevel() > CoomandRank.NORMAL.getLevel()) {
                if (line.charAt(0) == CoomandRank.GM.getCommandPrefix()) {
                    String[] splitted = line.split(" ");
                    splitted[0] = splitted[0].toLowerCase();
                    //管理员指令
                    if (line.charAt(0) == '*') {
                        CommandObject commandOb = commands.get(splitted[0]);
                        if (commandOb == null || commandOb.getType() != type) {
                            showMessage(c, "", type);
                            return true;
                        }
                        if (p.getAdministrativeLevel() >= commandOb.getAdministrativeLevel()) {
                            boolean ret = commandOb.execute(c, splitted);
                            if (ret) {
                                saveCommandsDatabase(c.getPlayer(), line);
                                群("GM " + p.getName() + " 指令 " + line + "", "815717096");
                            }
                        } else {
                            showMessage(c, "", type);
                        }
                        return true;
                    }
                }
            }
        }
        return false;
    }

    private static void saveCommandsDatabase(Player p, String command) {
        PreparedStatement ps = null;
        Connection con = null;
        try {
            con = Start.getInstance().getConnection();
            ps = con.prepareStatement("INSERT INTO gmlog (cid, command, mapid) VALUES (?, ?, ?)");
            ps.setInt(1, p.getId());
            ps.setString(2, command);
            ps.setInt(3, p.getMap().getId());
            ps.executeUpdate();
            ps.close();
        } catch (SQLException ex) {
            FileLogger.printError(FileLogger.DATABASE_EXCEPTION, ex);
        } finally {
            try {
                if (con != null && !con.isClosed()) {
                    con.close();
                }

            } catch (SQLException e) {
            }
        }
    }
}
